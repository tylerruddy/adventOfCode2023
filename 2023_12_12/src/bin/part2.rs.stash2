use std::collections::HashMap;

fn main() {
    println!("part1");
    let input = include_str!("./input1.txt");
    let result = part1(input);

    println!("{result}");

}

// Returns num_valid, count #, n_pos
fn recurse(puzzle: &mut Vec<char>, nums: &Vec<u32>, pos: i32, ht: &mut HashMap<(u32, u32, u32), u32>) -> (u32, u32, u32) {
    if pos == -1 {
        return (1, 0, 0);
    }
    if ht.contains_key((pos, ))
    let (num_valid, count, n_pos) = recurse(puzzle, nums, pos - 1, ht);
    if puzzle[pos as usize] == '.' {
        if count > 0 {

        }
    }
    return (0, 0, 0);
}

fn part1(input: &str) -> u32 {
    let mut res = 0;
    let lines: Vec<_> = input.lines().map(String::from).collect();
    for s in lines.iter() {
        let sp: Vec<_> = s.split(' ').collect();
        let nums: Vec<u32> = sp[1].split(',').map(|x| x.parse::<u32>().unwrap()).collect();
        let mut puzzle: Vec<char> = sp[0].chars().collect();
        let n_pos = 0;
        let mut ht: HashMap<(u32, u32, u32), u32> = Default::default();
        let temp = recurse(&mut puzzle, &nums, (nums.len() - 1) as i32, &mut ht).0;
        res += temp;
    }
    return res;
}

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        use super::*;
        let input1 = 
"???.### 1,1,3
.??..??...?##. 1,1,3
?#?#?#?#?#?#?#? 1,3,1,6
????.#...#... 4,1,1
????.######..#####. 1,6,5
?###???????? 3,2,1";
        let result1 = part1(input1);
        assert_eq!(result1, 21);
    }
}
